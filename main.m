% Main script for project.  Calls all the nessary functions
% to compute the camera position.
% This code uses matlab's iterative code advancement
% so it can be run in sections or all at once.

%% Set constants (enter data set data here).
% If someone could write an API for getting this data
% out of the size that would be great.
% For now, download the full resolution images and enter
% the data about the data set below.

% Turn on and off full output.  Set to zero to prevent all figures from
% being generated.
FULL = 1;

% Path to data files (assumes the full res jpegs)
path = '../HighRes/';

% Mission name. (start of image name).
mission = 'ISS030-E-';

% Starting image number.
start_image_num = 53334;

% Number of images.  THIS MUST BE 60 FOR NOW!
num_images = 60;

% The size of the jpg images to process (before resizing), width and height
img_size = [4256 2832];

% ISS Nadar information for the start and finish of the 60 images
ISS_lat_start = 46.5;
ISS_log_start = -102.0;
ISS_lat_end = 48.1;
ISS_log_end = -97.1;

ISS_altitude = 387; % KM
ISS_period = 93; % minutes

% Change the resize amount of the images in processing.
% This value is in the range (0,1], lower values will likely
% result in faster run times, but less accurate results.
resize_factor = 0.25;


%% Do k-means segmentation on the first file.

% Note we only do seqmentation on the first file and use it for each
% image in the 1 minute sequence to save processing time, 
% ideally it could be done on each file.

display('Step 1 of 5: Starting the k-means seqmentation...');

first_file = strcat(path, mission, num2str(start_image_num), '.jpg' );

[ horizon_image cut_rgb_image aurora ] = kmeans_segment(first_file);

% The following code shows the images generated by the kmeans_segment.
if FULL == 1;
    figure;
    imshow(horizon_image);
    title('k-means horizon line extraction mask');

    figure;
    imshow(cut_rgb_image);
    title('k-means extracted star field');

    figure;
    imshow(aurora);
    title('k-means aurora extraction mask');
end

%% Create the star trails.

display('Step 2 of 5: Starting the star trail creation process (takes a while)...');

% This step takes a while since it requires that all 60 images
% be read, resized, had their stars extracted, and be added together
% to form the star trails in the next step.
% This is less a limitation of the algorithm, and more a function of
% the slow nature of Matlab when it comes to loops.  Doing this in
% something like C++ would be quite easy, and would improve the
% speed a lot.
tic
trails = startrails(path, mission, start_image_num, num_images, img_size, 400, resize_factor);
toc

if FULL == 1
   figure;
   imshow(trails, [0 10]); 
   title('Star trails (from extracted stars)');
end

%% Extract the length data from the star trails.

display('Step 3 of 5: Starting the star trail extraction process...');

data = extract_lengths(trails, resize_factor, FULL);


%% Find the position given the star trail data.

display('Step 4 of 5: Starting the search for camera orientation...');

clear lsq;
% TODO: Give constants to constructor!
lsq = leastsq_global();

[ minimal_residual y x z ] = lsq.calc_residuals(data);

if FULL == 1
    figure;
    mesh(x, y, log(z));
    zlim([0 10]);
end

%% Project onto map.

display('Step 5 of 5: Showing the results on a map...');

show_wedge([ISS_lat_start; ISS_log_start], ISS_altitude, [ISS_lat_end; ISS_log_end], minimal_residual(3)*pi/180, horizon_image, aurora, 0)

